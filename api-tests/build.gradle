plugins {
    id "io.spring.dependency-management"
    id 'java'
    id 'io.qameta.allure'
}

compileJava.options.encoding = 'UTF-8'

//sourceCompatibility = JavaVersion.VERSION_16
//targetCompatibility = JavaVersion.VERSION_16


dependencies {
    //junit
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    testImplementation('org.junit.jupiter:junit-jupiter-api')
    testImplementation('org.junit.jupiter:junit-jupiter-engine')
    testImplementation('org.junit.jupiter:junit-jupiter-params')
    testImplementation('org.junit.vintage:junit-vintage-engine')

    //    //sptqa
////    implementation 'ru.sbtqa.tag.pagefactory:web-plugin:20.1.2'
////    implementation 'ru.sbtqa.tag.pagefactory:html-plugin:20.1.2'
////    implementation 'ru.sbtqa.tag.pagefactory:rest-plugin:20.1.2'
////    implementation 'ru.sbtqa.tag.pagefactory:page-factory-core:20.1.2'
//
//    //spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    implementation("org.springframework.boot:spring-boot-starter-test")
    implementation 'com.ibm.mq:mq-jms-spring-boot-starter:3.1.2'


//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//
//    //lombok
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
//
//    //log
    testImplementation 'org.slf4j:slf4j-api'
//    testImplementation 'org.slf4j:slf4j-simple'
//
//    // allure
//    implementation("io.qameta.allure:allure-cucumber4-jvm:2.13.9")
    implementation("io.qameta.allure:allure-junit5:${Versions.allureVersion}")
    implementation("ru.yandex.qatools.allure:allure-junit-adaptor:1.5.0")
    implementation("io.qameta.allure:allure-java-commons:${Versions.allureVersion}")
//
//    //other
    testImplementation('org.assertj:assertj-core')
    implementation('org.assertj:assertj-core')
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.postgresql:postgresql'
    implementation 'io.rest-assured:rest-assured'
    testImplementation 'org.awaitility:awaitility'


    //jaxb
//    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    implementation 'com.sun.xml.bind:jaxb-impl:4.0.0'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.0'
//    implementation 'jakarta.xml.ws:jakarta.xml.ws-api:4.0.0'
    implementation 'com.sun.xml.ws:jaxws-rt:4.0.0'
    implementation 'com.sun.xml.ws:jaxws-maven-plugin:4.0.1'

    //mq
//    implementation 'jakarta.jms:jakarta.jms-api:2.0.3'
    implementation 'com.ibm.mq:com.ibm.mq.allclient:9.3.3.1'
}
//wsimport -J-Djavax.xml.accessExternalDTD=all -J-D-Djavax.xml.accessExternalSchema=all -b http://www.w3.org/2001/XMLSchema.xsd -b customization.xjb -s genSrc https://www.dataaccess.com/webservicesserver/numberconversion.wso?WSDL

test {
//    useJUnitPlatform()
    String itags = System.getProperty("includeTags") ?
            System.getProperty("includeTags") : 'regression';
    String etags = System.getProperty("excludeTags") ?
            System.getProperty("excludeTags") : 'disable';
    systemProperty 'allure.results.directory', 'build/allure-results'
    useJUnitPlatform {
        includeTags itags
        excludeTags  etags
    }
//    testLogging {
//        events "passed", "skipped", "failed"
//    }
}
//tasks.withType(Test) {
//    useJUnitPlatform()
//}

tasks.withType(Test).configureEach {
    jvmArgs += "--enable-preview"
//    useJUnitPlatform()
}

//
//tasks.named('test', Test) {
//    useJUnitPlatform()
//
//    maxHeapSize = '1G'
//
//    testLogging {
//        events "passed"
//    }
//}

//java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(13)
//    }
//}

tasks.withType(JavaCompile).configureEach {
    options.with {
        encoding = 'UTF-8'
    }
}

configurations {
    testCompile {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

allure {
    version = '2.17.3'
//    autoconfigure = true
//    clean = true
//    configuration = "testImplementation"
//    aspectjweaver = true

//    useJUnit5 {
//        version = allureVersion
//    }
    adapter {
        allureJavaVersion = '2.17.3'
        aspectjVersion = '1.9.7'
        autoconfigureListeners = true
        aspectjWeaver = true

        frameworks {
            junit5 {
                adapterVersion = '2.17.3'
                enabled = true
                autoconfigureListeners = false
            }
            junit4 {
                enabled = false
            }
        }
    }
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}


//
//def uiTest = tasks.register("addresserviceTests", Test) {
//    useJUnitPlatform {
//        includeTags "addresservice"
//    }
//}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-parameters']
}

tasks.withType(Test).configureEach {
    System.setProperty("env", "dev");
    switch (System.getProperty("env", "dev")) {
        case "dev": systemProperty("stand.url", "https://dzen.ru/"); break
        case "test": systemProperty("stand.url", "https://dzen.ru/"); break
        default: throw new GradleException("Unknown property of project property 'env' : '" + System.getProperty("env") + "'")
    }
    System.properties.forEach { k, v -> systemProperty(k.toString(), v) }
}